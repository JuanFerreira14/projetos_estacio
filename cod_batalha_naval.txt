#include <stdio.h>
#include <stdlib.h>

#define TAM_TABULEIRO 10
#define TAM_NAVIO 3
#define TAM_HABILIDADE 5
#define NAVIO 3
#define AGUA 0

// Função para imprimir o tabuleiro
void imprimirTabuleiro(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO]) {
    int i, j;
    printf("Tabuleiro Batalha Naval (0=Agua, 3=Navio, 5=Habilidade):\n\n");
    for (i = 0; i < TAM_TABULEIRO; i++) {
        for (j = 0; j < TAM_TABULEIRO; j++) {
            printf("%d ", tabuleiro[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}

// Funções para validar e posicionar os navios

int validarNavioHorizontal(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO], int linha, int colunaInicial) {
    int i;
    if (colunaInicial + TAM_NAVIO > TAM_TABULEIRO) return 0;
    for (i = 0; i < TAM_NAVIO; i++) {
        if (tabuleiro[linha][colunaInicial + i] != AGUA) return 0;
    }
    return 1;
}

void posicionarNavioHorizontal(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO], int linha, int colunaInicial) {
    int i;
    for (i = 0; i < TAM_NAVIO; i++) {
        tabuleiro[linha][colunaInicial + i] = NAVIO;
    }
}

int validarNavioVertical(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO], int linhaInicial, int coluna) {
    int i;
    if (linhaInicial + TAM_NAVIO > TAM_TABULEIRO) return 0;
    for (i = 0; i < TAM_NAVIO; i++) {
        if (tabuleiro[linhaInicial + i][coluna] != AGUA) return 0;
    }
    return 1;
}

void posicionarNavioVertical(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO], int linhaInicial, int coluna) {
    int i;
    for (i = 0; i < TAM_NAVIO; i++) {
        tabuleiro[linhaInicial + i][coluna] = NAVIO;
    }
}

int validarNavioDiagonalCrescente(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO], int linhaInicial, int colunaInicial) {
    int i;
    if (linhaInicial + TAM_NAVIO > TAM_TABULEIRO || colunaInicial + TAM_NAVIO > TAM_TABULEIRO) return 0;
    for (i = 0; i < TAM_NAVIO; i++) {
        if (tabuleiro[linhaInicial + i][colunaInicial + i] != AGUA) return 0;
    }
    return 1;
}

void posicionarNavioDiagonalCrescente(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO], int linhaInicial, int colunaInicial) {
    int i;
    for (i = 0; i < TAM_NAVIO; i++) {
        tabuleiro[linhaInicial + i][colunaInicial + i] = NAVIO;
    }
}

int validarNavioDiagonalDecrescente(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO], int linhaInicial, int colunaInicial) {
    int i;
    if (linhaInicial + TAM_NAVIO > TAM_TABULEIRO || colunaInicial - (TAM_NAVIO - 1) < 0) return 0;
    for (i = 0; i < TAM_NAVIO; i++) {
        if (tabuleiro[linhaInicial + i][colunaInicial - i] != AGUA) return 0;
    }
    return 1;
}

void posicionarNavioDiagonalDecrescente(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO], int linhaInicial, int colunaInicial) {
    int i;
    for (i = 0; i < TAM_NAVIO; i++) {
        tabuleiro[linhaInicial + i][colunaInicial - i] = NAVIO;
    }
}

// Funções para criar as habilidades (cone, cruz e octaedro)

void criarCone(int cone[TAM_HABILIDADE][TAM_HABILIDADE]) {
    int i, j;
    for (i = 0; i < TAM_HABILIDADE; i++) {
        for (j = 0; j < TAM_HABILIDADE; j++) {
            cone[i][j] = (j >= TAM_HABILIDADE / 2 - i && j <= TAM_HABILIDADE / 2 + i) ? 1 : 0;
        }
    }
}

void criarCruz(int cruz[TAM_HABILIDADE][TAM_HABILIDADE]) {
    int i, j;
    for (i = 0; i < TAM_HABILIDADE; i++) {
        for (j = 0; j < TAM_HABILIDADE; j++) {
            cruz[i][j] = (i == TAM_HABILIDADE / 2 || j == TAM_HABILIDADE / 2) ? 1 : 0;
        }
    }
}

void criarOctaedro(int octaedro[TAM_HABILIDADE][TAM_HABILIDADE]) {
    int i, j;
    for (i = 0; i < TAM_HABILIDADE; i++) {
        for (j = 0; j < TAM_HABILIDADE; j++) {
            octaedro[i][j] = (abs(i - TAM_HABILIDADE / 2) + abs(j - TAM_HABILIDADE / 2) <= TAM_HABILIDADE / 2) ? 1 : 0;
        }
    }
}

// Função para aplicar uma habilidade no tabuleiro

void aplicarHabilidade(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO], int habilidade[TAM_HABILIDADE][TAM_HABILIDADE], int origemLinha, int origemColuna) {
    int i, j;
    for (i = 0; i < TAM_HABILIDADE; i++) {
        for (j = 0; j < TAM_HABILIDADE; j++) {
            int linha = origemLinha - TAM_HABILIDADE / 2 + i;
            int coluna = origemColuna - TAM_HABILIDADE / 2 + j;
            if (linha >= 0 && linha < TAM_TABULEIRO && coluna >= 0 && coluna < TAM_TABULEIRO) {
                if (habilidade[i][j] == 1 && tabuleiro[linha][coluna] == AGUA)
                    tabuleiro[linha][coluna] = 5; // Marcar com habilidade
            }
        }
    }
}

// Função principal

int main() {
    int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO] = {0};  // Inicializa o tabuleiro com 0 (água)
    
    // Matrizes de habilidades
    int cone[TAM_HABILIDADE][TAM_HABILIDADE];
    int cruz[TAM_HABILIDADE][TAM_HABILIDADE];
    int octaedro[TAM_HABILIDADE][TAM_HABILIDADE];

    criarCone(cone);
    criarCruz(cruz);
    criarOctaedro(octaedro);

    // Posicionar alguns navios no tabuleiro
    int hLinha = 1, hColuna = 2;
    int vLinha = 4, vColuna = 7;
    int dCrescenteLinha = 0, dCrescenteColuna = 0;
    int dDecrescenteLinha = 3, dDecrescenteColuna = 9;

    if (validarNavioHorizontal(tabuleiro, hLinha, hColuna)) {
        posicionarNavioHorizontal(tabuleiro, hLinha, hColuna);
    } else {
        printf("Erro ao posicionar navio horizontal.\n");
    }

    if (validarNavioVertical(tabuleiro, vLinha, vColuna)) {
        posicionarNavioVertical(tabuleiro, vLinha, vColuna);
    } else {
        printf("Erro ao posicionar navio vertical.\n");
    }

    if (validarNavioDiagonalCrescente(tabuleiro, dCrescenteLinha, dCrescenteColuna)) {
        posicionarNavioDiagonalCrescente(tabuleiro, dCrescenteLinha, dCrescenteColuna);
    } else {
        printf("Erro ao posicionar navio diagonal crescente.\n");
    }

    if (validarNavioDiagonalDecrescente(tabuleiro, dDecrescenteLinha, dDecrescenteColuna)) {
        posicionarNavioDiagonalDecrescente(tabuleiro, dDecrescenteLinha, dDecrescenteColuna);
    } else {
        printf("Erro ao posicionar navio diagonal decrescente.\n");
    }

    // Aplicar as habilidades
    aplicarHabilidade(tabuleiro, cone, 2, 2);
    aplicarHabilidade(tabuleiro, cruz, 5, 5);
    aplicarHabilidade(tabuleiro, octaedro, 7, 7);

    // Imprimir o tabuleiro final
    imprimirTabuleiro(tabuleiro);

    return 0;
}
