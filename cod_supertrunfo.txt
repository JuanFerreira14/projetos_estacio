#include <stdio.h>// Função para validar a entrada de dados positivos para números inteirosvoid validarEntradaPositivaInteira(int *entrada, const char *mensagem) {    while (scanf("%d", entrada) != 1 || *entrada < 0) {        printf("%s (valor não negativo): ", mensagem);        while (getchar() != '\n');  // Limpa o buffer    }}// Função para validar a entrada de dados positivos para números de ponto flutuantevoid validarEntradaPositiva(float *entrada, const char *mensagem) {    while (scanf("%f", entrada) != 1 || *entrada <= 0) {        printf("%s (valor positivo): ", mensagem);        while (getchar() != '\n');  // Limpa o buffer    }}// Função para cadastrar os dados de uma cidade e calcular os atributos derivadosvoid cadastrarCidade(char *estado, char *codigo, char *nome, unsigned long int *populacao, float *area, float *pib, int *pontos,                      float *densidade, float *pibPerCapita, float *superPoder) {    printf("Estado (A-H): ");    scanf(" %c", estado);    printf("Código da Carta (ex: A01): ");    scanf("%s", codigo);    printf("Nome da Cidade: ");    scanf(" %[^\n]", nome);    printf("População: ");    scanf("%lu", populacao);    printf("Área (em km²): ");    validarEntradaPositiva(area, "Área");    printf("PIB (em bilhões de R$): ");    validarEntradaPositiva(pib, "PIB");    printf("Número de Pontos Turísticos: ");    validarEntradaPositivaInteira(pontos, "Pontos Turísticos");    // Cálculo dos atributos derivados    *densidade = *populacao / *area;    *pibPerCapita = *pib * 1000000000 / *populacao;  // PIB per capita em reais    // Cálculo do Super Poder    *superPoder = (float)(*populacao) + *area + *pib + *pontos + *pibPerCapita + (1.0 / *densidade);}void exibirCarta(char estado, char *codigo, char *nome, unsigned long int populacao, float area, float pib, int pontos,                  float densidade, float pibPerCapita, float superPoder) {    printf("\n=== Carta ===\n");    printf("Estado: %c\n", estado);    printf("Código: %s\n", codigo);    printf("Cidade: %s\n", nome);    printf("População: %lu\n", populacao);    printf("Área: %.2f km²\n", area);    printf("PIB: %.2f bilhões\n", pib);    printf("Pontos Turísticos: %d\n", pontos);    printf("Densidade Populacional: %.2f hab/km²\n", densidade);    printf("PIB per Capita: %.2f R$\n", pibPerCapita);    printf("Super Poder: %.2f\n", superPoder);}void compararCartas(float valor1, float valor2, const char *atributo) {    printf("%s: Carta 1 venceu (%s)\n", atributo, (valor1 > valor2) ? "sim" : "não");}int main() {    // Variáveis para a Carta 1    char estado1, codigo1[4], nome1[50];    unsigned long int populacao1;    float area1, pib1, densidade1, pibPerCapita1, superPoder1;    int pontos1;    // Variáveis para a Carta 2    char estado2, codigo2[4], nome2[50];    unsigned long int populacao2;    float area2, pib2, densidade2, pibPerCapita2, superPoder2;    int pontos2;    // Cadastro da Carta 1    printf("=== Cadastro da Carta 1 ===\n");    cadastrarCidade(&estado1, codigo1, nome1, &populacao1, &area1, &pib1, &pontos1, &densidade1, &pibPerCapita1, &superPoder1);    // Cadastro da Carta 2    printf("\n=== Cadastro da Carta 2 ===\n");    cadastrarCidade(&estado2, codigo2, nome2, &populacao2, &area2, &pib2, &pontos2, &densidade2, &pibPerCapita2, &superPoder2);    // Exibição da Carta 1    exibirCarta(estado1, codigo1, nome1, populacao1, area1, pib1, pontos1, densidade1, pibPerCapita1, superPoder1);    // Exibição da Carta 2    exibirCarta(estado2, codigo2, nome2, populacao2, area2, pib2, pontos2, densidade2, pibPerCapita2, superPoder2);    // Comparações de Atributos    printf("\n=== Comparação de Cartas ===\n");    compararCartas(populacao1, populacao2, "População");    compararCartas(area1, area2, "Área");    compararCartas(pib1, pib2, "PIB");    compararCartas(pontos1, pontos2, "Pontos Turísticos");    compararCartas(densidade1, densidade2, "Densidade Populacional");    compararCartas(pibPerCapita1, pibPerCapita2, "PIB per Capita");    compararCartas(superPoder1, superPoder2, "Super Poder");    return 0;}